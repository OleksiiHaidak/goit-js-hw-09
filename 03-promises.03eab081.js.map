{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBAI3C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAI,CAAEH,WAAUC,UAEhBG,EAAI,CAAEJ,WAAUC,S,GAEjBA,E,IAZmBN,SAASC,cAAc,UAiB/BY,iBAAiB,SAAS,SAACC,GAC3CA,EAAEC,iBAEF,IAAMC,EAAQC,OAAOlB,EAAWmB,OAC1BC,EAAOF,OAAOf,EAAUgB,OACxBE,EAASH,OAAOd,EAAYe,OAElC,GAAIC,EAAO,GAAKH,EAAQ,GAAKI,GAAU,EACrCvB,EAAAwB,OAAOC,QAAQ,0DAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYH,EAAQG,IAAY,CAErDnB,EAAcmB,EADGP,GAASO,EAAW,GAAKJ,GACRK,MAAK,SAAAC,G,IAAEpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjDT,EAAAwB,OAAOK,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAC5DsB,OAAM,SAAAH,G,IAAEpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACnBT,EAAAwB,OAAOC,QAAQ,sBAAqCK,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector(\"input[name='delay']\");\nconst inputStep = document.querySelector(\"input[name='step']\");\nconst inputAmount = document.querySelector(\"input[name='amount']\");\nconst btnCreatePromises = document.querySelector('button');\n\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        res({ position, delay });\n      } else {\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n};\n\n\nbtnCreatePromises.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n\n  const delay = Number(inputDelay.value);\n  const step = Number(inputStep.value);\n  const amount = Number(inputAmount.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notify.failure('Invalid input values. All values must be positive');\n    return;\n  };\n\n  for (let position = 1; position <= amount; position++) {\n    const newDelay = delay + (position - 1) * step;\n    createPromise(position, newDelay).then(({position, delay}) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }).catch(({position, delay}) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n});\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$inputDelay","document","querySelector","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","res","rej","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","Number","value","step","amount","Notify","failure","position1","then","param","success","concat","catch"],"version":3,"file":"03-promises.03eab081.js.map"}